{
	"info": {
		"_postman_id": "42634570-ea94-4ea4-b437-a65bfdd171ec",
		"name": "CA _Marketing_Rand_Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31249184"
	},
	"item": [
		{
			"name": "Positive Test",
			"item": [
				{
					"name": "POST addresses",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.clear();  // don't use in PATCH pre-request",
									"",
									"// pm.environment.unset(\"ID\");",
									"// pm.environment.unset(\"company\");",
									"// pm.environment.unset(\"zipCode\");",
									"// pm.environment.unset(\"addressLine1\");",
									"// pm.environment.unset(\"addressLine2\");",
									"// pm.environment.unset(\"firstName\");",
									"// pm.environment.unset(\"lastName\");",
									"// pm.environment.unset(\"city\");",
									"// pm.environment.unset(\"country\");",
									"// pm.environment.unset(\"phoneNumber\");",
									"// pm.environment.unset(\"subdivision\");",
									"",
									"//returns a random integer from 10000 to 90000 with 5 digits ",
									"pm.environment.set(\"zipCode\", Math.floor(Math.random()*90000) + 10000);",
									"",
									"//returns a random integer from 100 to 900 with 3 digits",
									"pm.environment.set(\"addressLine2\", Math.floor(Math.random()*900) + 100);",
									"",
									"const stateAbbreviations = [",
									" 'AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA',",
									" 'GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA',",
									" 'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND',",
									" 'MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT',",
									" 'VT','VI','VA','WA','WV','WI','WY'",
									"];",
									"const randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];",
									"pm.environment.set(\"subdivision\", randomState);",
									"",
									"// Using Faker lib https://learning.postman.com/docs/writing-scripts/script-references/variables-list/",
									"let fName = pm.variables.replaceIn('{{$randomFirstName}}')",
									"pm.environment.set(\"firstName\", fName);",
									"",
									"let lName = pm.variables.replaceIn('{{$randomLastName}}')",
									"pm.environment.set(\"lastName\", lName);",
									"",
									"let co = pm.variables.replaceIn('{{$randomCompanyName}}')",
									"pm.environment.set(\"company\", co);",
									"",
									"let addrLn1 = pm.variables.replaceIn('{{$randomStreetAddress}}')",
									"pm.environment.set(\"addressLine1\", addrLn1);",
									"",
									"let cty = pm.variables.replaceIn('{{$randomCity}}')",
									"pm.environment.set(\"city\", cty);",
									"",
									"let cntry = pm.variables.replaceIn('{{$randomCountry}}')",
									"pm.environment.set(\"country\", cntry);",
									"",
									"let phoneNum = pm.variables.replaceIn('{{$randomPhoneNumber}}')",
									"pm.environment.set(\"phoneNumber\", phoneNum);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(responseCode.code === 200) {",
									"    tests[\"Backend is available, response code is 200\"] = true;",
									"} else if (responseCode.code === 401) {",
									"    tests[\"Not authorised, Check access token or Log in\"] = false;",
									"} else if (responseCode.code === 403) {",
									"    tests[\"Forbiden\"] = false;",
									"} else if (responseCode.code === 404) {",
									"    tests[\"Not Found. Check if you made correct request\"] = false;",
									"} else if (responseCode.code === 422) {",
									"    tests[\"The instance is not valid\"] = false;",
									"} else {",
									"    tests[\"Something went wrong. Check response body\"] = false;",
									"}",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"ID\", jsonData.id);",
									"",
									"pm.test(\"ID is correct\", function () {",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));",
									"});",
									"",
									"// use the `pm.*` API to write your test",
									"// the `pm.test()` method accepts 2 parameters",
									"// the first parameter is the name of your test (be descriptive)",
									"// the second parameter is a function whereby if any assertions within your function fail, then the test will fail",
									"",
									"pm.test(\"Name of the first test\", function () {",
									"    // make an assertion",
									"    // if your assertion throws an error, this test will fail",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Name of the second test\", function () {",
									"    // make as many assertions as you'd like as part of this test",
									"    // if any assertion throws an error, this test will fail",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"//tests['Response latency is acceptable'] = responseTime < 1000;",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response Size is less than 1000B\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Header is correct\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.21.6\");",
									"});",
									"",
									"pm.test(\"response should be okay to process\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"});",
									"",
									"",
									"/*",
									"if(responseBody.has(\"Success\")) //or any other success condition",
									"{",
									"    postman.setNextRequest('Continue Processing');",
									"    tests[\"Success found\"] = true;",
									"}",
									"else",
									"{",
									"    postman.setNextRequest('Delay For 10 Seconds');",
									"    tests[\"No success found\"] = true;",
									"}",
									"*/",
									"/*",
									"pm.test(\"Returns 15 char alhpanumeric id\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.form.secondHash).to.match(/^[a-z0-9]{36}$/);",
									"});",
									"*/",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Mrp1k_VPWIJn4zez74a-qS0kOftZUjf6m_4qiruuqeU.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTE1VDA2OjMzOjAzLjUzMFoiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImFkZmQ4OWNhLTRlNjgtNDdjNi1hNzkwLWM5NDBkNmU5M2M5NyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0xNVQxMDozMzowMy41MzBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"address\": {\r\n\t\t\"fullName\": {\r\n\t\t\t\"firstName\": \"{{firstName}}\",\r\n\t\t\t\"lastName\": \"{{lastName}}\"\r\n\t\t},\r\n\t\t\"company\": \"{{company}}\",\r\n\t\t\"taxInfo\": {\r\n\t\t\t\"id\": null,\r\n\t\t\t\"type\": null\r\n\t\t},\r\n\t\t\"addressLine1\": \"{{addressLine1}}\",\r\n\t\t\"addressLine2\": \"{{addressLine2}}\",\r\n\t\t\"street\": {\r\n\t\t\t\"name\": null,\r\n\t\t\t\"number\": null\r\n\t\t},\r\n\t\t\"city\": \"{{city}}\",\r\n\t\t\"country\": \"{{country}}\",\r\n\t\t\"subdivision\": \"{{subdivision}}\",\r\n\t\t\"zipCode\": \"{{zipCode}}\",\r\n\t\t\"phoneNumber\": \"{{phoneNumber}}\"\r\n\t},\r\n\t\"setAsDefault\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Specific addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(responseCode.code === 200) {",
									"    tests[\"Backend is available, response code is 200\"] = true;",
									"} else if (responseCode.code === 401) {",
									"    tests[\"Not authorised, Check access token or Log in\"] = false;",
									"} else if (responseCode.code === 403) {",
									"    tests[\"Forbiden\"] = false;",
									"} else if (responseCode.code === 404) {",
									"    tests[\"Not Found. Check if you made correct request\"] = false;",
									"} else if (responseCode.code === 422) {",
									"    tests[\"The instance is not valid\"] = false;",
									"} else {",
									"    tests[\"Something went wrong. Check response body\"] = false;",
									"}",
									"",
									"pm.test(\"Response should be okay to process\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"});",
									"pm.test(\"ID is correct\", function () {",
									"    const jsonData = pm.response.json(); ",
									"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));",
									"});",
									"",
									"pm.test(\"Entire response is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));",
									"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"firstName\"));",
									"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"lastName\"));",
									"    pm.expect(jsonData.address.country).to.eql(pm.environment.get(\"country\"));",
									"    pm.expect(jsonData.address.subdivision).to.eql(pm.environment.get(\"subdivision\"));",
									"    pm.expect(jsonData.address.city).to.eql(pm.environment.get(\"city\"));",
									"    pm.expect(jsonData.address.zipCode).to.eql('' + pm.environment.get(\"zipCode\"));",
									"    pm.expect(jsonData.address.phoneNumber).to.eql(pm.environment.get(\"phoneNumber\"));",
									"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"company\"));",
									"    pm.expect(jsonData.address.addressLine1).to.eql(pm.environment.get(\"addressLine1\"));",
									"    pm.expect(jsonData.address.addressLine2).to.eql('' + pm.environment.get(\"addressLine2\"));",
									"});",
									"",
									"pm.test(\"Response body should be in the correct format\", function() {",
									"    let jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.address).to.be.a('object');",
									"    pm.expect(jsonResponse.address.id).to.be.a('string');",
									"    pm.expect(jsonResponse.address.fullName).to.be.a('object');",
									"    pm.expect(jsonResponse.address.fullName.firstName).to.be.a('string');",
									"    pm.expect(jsonResponse.address.fullName.lastName).to.be.a('string');",
									"    pm.expect(jsonResponse.address.country).to.be.a('string');",
									"    pm.expect(jsonResponse.address.subdivision).to.be.a('string');",
									"    pm.expect(jsonResponse.address.city).to.be.a('string');",
									"    pm.expect(jsonResponse.address.zipCode).to.be.a('string');",
									"    pm.expect(jsonResponse.address.phoneNumber).to.be.a('string');",
									"    pm.expect(jsonResponse.address.addressLine1).to.be.a('string');",
									"    pm.expect(jsonResponse.address.addressLine2).to.be.a('string');",
									"    pm.expect(jsonResponse.isDefaultAddress).to.be.a('boolean');",
									"});",
									"pm.test(\"Response Header is present and correct\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.21.6\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Mrp1k_VPWIJn4zez74a-qS0kOftZUjf6m_4qiruuqeU.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTE1VDA2OjMzOjAzLjUzMFoiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImFkZmQ4OWNhLTRlNjgtNDdjNi1hNzkwLWM5NDBkNmU5M2M5NyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0xNVQxMDozMzowMy41MzBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.set(\"company\", \"Google-\" + new Date().getTime())",
									"",
									"// pm.environment.set(\"zipCode\", Math.floor(Math.random()*90000) + 10000)",
									"",
									"// pm.environment.set(\"addressLine2\", Math.floor(Math.random()*900) + 100)",
									"",
									"// pm.environment.clear(); don't use in PATCH pre-request",
									"",
									"//returns a random integer from 10000 to 90000 with 5 digits ",
									"pm.environment.set(\"zipCode\", Math.floor(Math.random()*90000) + 10000);",
									"",
									"//returns a random integer from 100 to 900 with 3 digits",
									"pm.environment.set(\"addressLine2\", Math.floor(Math.random()*900) + 100);",
									"",
									"const stateAbbreviations = [",
									" 'AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA',",
									" 'GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA',",
									" 'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND',",
									" 'MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT',",
									" 'VT','VI','VA','WA','WV','WI','WY'",
									"];",
									"const randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];",
									"pm.environment.set(\"subdivision\", randomState);",
									"",
									"// Using Faker lib https://learning.postman.com/docs/writing-scripts/script-references/variables-list/",
									"let fName = pm.variables.replaceIn('{{$randomFirstName}}')",
									"pm.environment.set(\"firstName\", fName);",
									"",
									"let lName = pm.variables.replaceIn('{{$randomLastName}}')",
									"pm.environment.set(\"lastName\", lName);",
									"",
									"let co = pm.variables.replaceIn('{{$randomCompanyName}}')",
									"pm.environment.set(\"company\", co);",
									"",
									"let addrLn1 = pm.variables.replaceIn('{{$randomStreetAddress}}')",
									"pm.environment.set(\"addressLine1\", addrLn1);",
									"",
									"let cty = pm.variables.replaceIn('{{$randomCity}}')",
									"pm.environment.set(\"city\", cty);",
									"",
									"let cntry = pm.variables.replaceIn('{{$randomCountry}}')",
									"pm.environment.set(\"country\", cntry);",
									"",
									"let phoneNum = pm.variables.replaceIn('{{$randomPhoneNumber}}')",
									"pm.environment.set(\"phoneNumber\", phoneNum);",
									"",
									"let boo = pm.variables.replaceIn('{{$randomBoolean}}')",
									"pm.environment.set(\"setAsDefault\", boo);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(responseCode.code === 200) {",
									"    tests[\"Backend is available, response code is 200\"] = true;",
									"} else if (responseCode.code === 401) {",
									"    tests[\"Not authorised, Check access token or Log in\"] = false;",
									"} else if (responseCode.code === 403) {",
									"    tests[\"Forbiden\"] = false;",
									"} else if (responseCode.code === 404) {",
									"    tests[\"Not Found. Check if you made correct request\"] = false;",
									"} else if (responseCode.code === 422) {",
									"    tests[\"The instance is not valid\"] = false;",
									"} else {",
									"    tests[\"Something went wrong. Check response body\"] = false;",
									"}",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"pm.test(\"Response Header is present and correct\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.21.6\");",
									"});",
									"pm.test(\"Address has been updated, OK\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.have.jsonBody({});",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Mrp1k_VPWIJn4zez74a-qS0kOftZUjf6m_4qiruuqeU.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTE1VDA2OjMzOjAzLjUzMFoiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImFkZmQ4OWNhLTRlNjgtNDdjNi1hNzkwLWM5NDBkNmU5M2M5NyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0xNVQxMDozMzowMy41MzBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "company",
								"type": "text",
								"value": "{{$randomCompanyName}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"address\": {\r\n\t\t\"id\": \"{{ID}}\",\r\n\t\t\"fullName\": {\r\n\t\t\t\"firstName\": \"{{firstName}}\",\r\n\t\t\t\"lastName\": \"{{lastName}}\"\r\n\t\t},\r\n\t\t\"company\": \"{{company}}\",\r\n\t\t\"taxInfo\": {\r\n\t\t\t\"id\": null,\r\n\t\t\t\"type\": null\r\n\t\t},\r\n\t\t\"addressLine1\": \"{{addressLine1}}\",\r\n\t\t\"addressLine2\": \"{{addressLine2}}\",\r\n\t\t\"street\": {\r\n\t\t\t\"name\": null,\r\n\t\t\t\"number\": null\r\n\t\t},\r\n\t\t\"city\": \"{{city}}\",\r\n\t\t\"country\": \"{{country}}\",\r\n\t\t\"subdivision\": \"{{subdivision}}\",\r\n\t\t\"zipCode\": \"{{zipCode}}\",\r\n\t\t\"phoneNumber\": \"{{phoneNumber}}\"\r\n\t},\r\n\t\"setAsDefault\": {{setAsDefault}},\r\n\t\"fieldMask\": {\r\n\t\t\"paths\": [\"fullName.firstName\", \"fullName.lastName\", \"company\", \"addressLine1\", \"addressLine2\", \"city\", \"country\", \"subdivision\", \"zipCode\", \"phoneNumber\", \"setAsDefault\"]\r\n\t}\r\n}"
						},
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Specific Updated addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(responseCode.code === 200) {",
									"    tests[\"Backend is available, response code is 200\"] = true;",
									"} else if (responseCode.code === 401) {",
									"    tests[\"Not authorised, Check access token or Log in\"] = false;",
									"} else if (responseCode.code === 403) {",
									"    tests[\"Forbiden\"] = false;",
									"} else if (responseCode.code === 404) {",
									"    tests[\"Not Found. Check if you made correct request\"] = false;",
									"} else if (responseCode.code === 422) {",
									"    tests[\"The instance is not valid\"] = false;",
									"} else {",
									"    tests[\"Something went wrong. Check response body\"] = false;",
									"}",
									"",
									"// Check changed values",
									"pm.test(\"Entire response is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));",
									"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"firstName\"));",
									"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"lastName\"));",
									"    pm.expect(jsonData.address.country).to.eql(pm.environment.get(\"country\"));",
									"    pm.expect(jsonData.address.subdivision).to.eql(pm.environment.get(\"subdivision\"));",
									"    pm.expect(jsonData.address.city).to.eql(pm.environment.get(\"city\"));",
									"    pm.expect(jsonData.address.zipCode).to.eql('' + pm.environment.get(\"zipCode\"));",
									"    pm.expect(jsonData.address.phoneNumber).to.eql(pm.environment.get(\"phoneNumber\"));",
									"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"company\"));",
									"    pm.expect(jsonData.address.addressLine1).to.eql(pm.environment.get(\"addressLine1\"));",
									"    pm.expect(jsonData.address.addressLine2).to.eql('' + pm.environment.get(\"addressLine2\"));",
									"    //pm.expect(jsonData.isDefaultAddress).to.eql(Boolean(pm.environment.get(\"setAsDefault\")));",
									"});",
									"",
									"pm.test(\"response should be okay to process\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"});",
									"",
									"",
									"pm.test(\"Response body should be in the correct format\", function() {",
									"    let jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.address).to.be.a('object');",
									"    pm.expect(jsonResponse.address.id).to.be.a('string');",
									"    pm.expect(jsonResponse.address.fullName).to.be.a('object');",
									"    pm.expect(jsonResponse.address.fullName.firstName).to.be.a('string');",
									"    pm.expect(jsonResponse.address.fullName.lastName).to.be.a('string');",
									"    pm.expect(jsonResponse.address.country).to.be.a('string');",
									"    pm.expect(jsonResponse.address.subdivision).to.be.a('string');",
									"    pm.expect(jsonResponse.address.city).to.be.a('string');",
									"    pm.expect(jsonResponse.address.zipCode).to.be.a('string');",
									"    pm.expect(jsonResponse.address.phoneNumber).to.be.a('string');",
									"    pm.expect(jsonResponse.address.company).to.be.a('string');",
									"    pm.expect(jsonResponse.address.addressLine1).to.be.a('string');",
									"    pm.expect(jsonResponse.isDefaultAddress).to.be.a('boolean');",
									"});",
									"",
									"pm.test(\"Response Header is present and correct\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.21.6\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Mrp1k_VPWIJn4zez74a-qS0kOftZUjf6m_4qiruuqeU.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTE1VDA2OjMzOjAzLjUzMFoiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImFkZmQ4OWNhLTRlNjgtNDdjNi1hNzkwLWM5NDBkNmU5M2M5NyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0xNVQxMDozMzowMy41MzBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(responseCode.code === 200) {",
									"    tests[\"Backend is available, response code is 200\"] = true;",
									"} else if (responseCode.code === 401) {",
									"    tests[\"Not authorised, Check access token or Log in\"] = false;",
									"} else if (responseCode.code === 403) {",
									"    tests[\"Forbiden\"] = false;",
									"} else if (responseCode.code === 404) {",
									"    tests[\"Not Found. Check if you made correct request\"] = false;",
									"} else if (responseCode.code === 422) {",
									"    tests[\"The instance is not valid\"] = false;",
									"} else {",
									"    tests[\"Something went wrong. Check response body\"] = false;",
									"}",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response Size is less than 1000 B\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response Header is present and correct\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.21.6\");",
									"});",
									"",
									"pm.test(\"Order has been deleted, OK\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.an('object');",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"    pm.response.to.have.jsonBody({});",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Mrp1k_VPWIJn4zez74a-qS0kOftZUjf6m_4qiruuqeU.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTE1VDA2OjMzOjAzLjUzMFoiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImFkZmQ4OWNhLTRlNjgtNDdjNi1hNzkwLWM5NDBkNmU5M2M5NyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0xNVQxMDozMzowMy41MzBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
							}
						],
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Deleted address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(responseCode.code === 200) {",
									"    tests[\"Backend is available, response code is 200\"] = false;",
									"} else if (responseCode.code === 401) {",
									"    tests[\"Not authorised, Check access token or Log in\"] = true;",
									"} else if (responseCode.code === 403) {",
									"    tests[\"Forbiden\"] = true;",
									"} else if (responseCode.code === 404) {",
									"    tests[\"Not Found. Check if you made correct request\"] = true;",
									"} else if (responseCode.code === 422) {",
									"    tests[\"The instance is not valid\"] = true;",
									"} else if (responseCode.code === 400) {",
									"    tests[\"Bad Request\"] = true;",
									"} else {",
									"    tests[\"Something went wrong. Check response body\"] = true;",
									"}",
									"",
									"pm.test(\"Status code is 400, as expected\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response Size is less than 1000 B\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Header is correct\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");",
									"    pm.response.to.have.header(\"Content-Length\",\"191\");",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.21.6\");",
									"});",
									"",
									"pm.test(\"Order can't be deleted, nonexist. As expected.\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.response.to.be.an('object');",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"});",
									"",
									"pm.test(\"Message is include previously deleted ID\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"message\", (pm.environment.get(\"ID\")));",
									"});",
									"",
									"pm.test(\"Message details ID is correct\", function () {",
									"    const jsonData = pm.response.json(); ",
									"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: \" + pm.environment.get(\"ID\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "cnndWGmkzVeGKwGws721d8SrQ0BdfoKtQmw6nHWJQgU.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTEzVDA2OjEwOjIwLjE2MloiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImFkZmQ4OWNhLTRlNjgtNDdjNi1hNzkwLWM5NDBkNmU5M2M5NyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0xM1QxMDoxMDoyMC4xNjJaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{ID}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Test",
			"item": [
				{
					"name": "DELETE address 2nd time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(responseCode.code === 200) {",
									"    tests[\"Backend is available, response code is 200\"] = false;",
									"} else if (responseCode.code === 401) {",
									"    tests[\"Not authorised, Check access token or Log in\"] = true;",
									"} else if (responseCode.code === 403) {",
									"    tests[\"Forbiden\"] = true;",
									"} else if (responseCode.code === 404) {",
									"    tests[\"Not Found. Check if you made correct request\"] = true;",
									"} else if (responseCode.code === 422) {",
									"    tests[\"The instance is not valid\"] = true;",
									"} else if (responseCode.code === 400) {",
									"    tests[\"Bad Request\"] = true;",
									"} else {",
									"    tests[\"Something went wrong. Check response body\"] = true;",
									"}",
									"",
									"pm.test(\"Status code is 400, as expected\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response Size is less than 1000 B\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Header is correct\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");",
									"    pm.response.to.have.header(\"Content-Length\",\"191\");",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.21.6\");",
									"});",
									"",
									"pm.test(\"Order can't be deleted, nonexist. As expected.\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.response.to.be.an('object');",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"});",
									"pm.test(\"Message is include previously deleted ID\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"message\", (pm.environment.get(\"ID\")));",
									"});",
									"pm.test(\"Message details ID is correct\", function () {",
									"    const jsonData = pm.response.json(); ",
									"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: \" + pm.environment.get(\"ID\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Mrp1k_VPWIJn4zez74a-qS0kOftZUjf6m_4qiruuqeU.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTE1VDA2OjMzOjAzLjUzMFoiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImFkZmQ4OWNhLTRlNjgtNDdjNi1hNzkwLWM5NDBkNmU5M2M5NyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0xNVQxMDozMzowMy41MzBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
							}
						],
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Deleted address 2nd time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(responseCode.code === 200) {",
									"    tests[\"Backend is available, response code is 200\"] = false;",
									"} else if (responseCode.code === 401) {",
									"    tests[\"Not authorised, Check access token or Log in\"] = true;",
									"} else if (responseCode.code === 403) {",
									"    tests[\"Forbiden\"] = true;",
									"} else if (responseCode.code === 404) {",
									"    tests[\"Not Found. Check if you made correct request\"] = true;",
									"} else if (responseCode.code === 422) {",
									"    tests[\"The instance is not valid\"] = true;",
									"} else if (responseCode.code === 400) {",
									"    tests[\"Bad Request\"] = true;",
									"} else {",
									"    tests[\"Something went wrong. Check response body\"] = true;",
									"}",
									"",
									"pm.test(\"Status code is 400, as expected\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response Size is less than 1000 B\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Header is correct\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");",
									"    pm.response.to.have.header(\"Content-Length\",\"191\");",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.21.6\");",
									"});",
									"",
									"pm.test(\"Order can't be deleted, nonexist. As expected.\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.response.to.be.an('object');",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"});",
									"",
									"pm.test(\"Message is include previously deleted ID\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"message\", (pm.environment.get(\"ID\")));",
									"});",
									"",
									"pm.test(\"Message details ID is correct\", function () {",
									"    const jsonData = pm.response.json(); ",
									"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: \" + pm.environment.get(\"ID\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "cnndWGmkzVeGKwGws721d8SrQ0BdfoKtQmw6nHWJQgU.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTEzVDA2OjEwOjIwLjE2MloiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImFkZmQ4OWNhLTRlNjgtNDdjNi1hNzkwLWM5NDBkNmU5M2M5NyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0xM1QxMDoxMDoyMC4xNjJaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Deleted address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.environment.set(\"company\", \"Google-\" + new Date().getTime())\r",
									"\r",
									"// pm.environment.set(\"zipCode\", Math.floor(Math.random()*90000) + 10000)\r",
									"\r",
									"// pm.environment.set(\"addressLine2\", Math.floor(Math.random()*900) + 100)\r",
									"\r",
									"// pm.environment.clear(); don't use in PATCH pre-request\r",
									"\r",
									"//returns a random integer from 10000 to 90000 with 5 digits \r",
									"pm.environment.set(\"zipCode\", Math.floor(Math.random()*90000) + 10000);\r",
									"\r",
									"//returns a random integer from 100 to 900 with 3 digits\r",
									"pm.environment.set(\"addressLine2\", Math.floor(Math.random()*900) + 100);\r",
									"\r",
									"const stateAbbreviations = [\r",
									" 'AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA',\r",
									" 'GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA',\r",
									" 'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND',\r",
									" 'MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT',\r",
									" 'VT','VI','VA','WA','WV','WI','WY'\r",
									"];\r",
									"const randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];\r",
									"pm.environment.set(\"subdivision\", randomState);\r",
									"\r",
									"// Using Faker lib https://learning.postman.com/docs/writing-scripts/script-references/variables-list/\r",
									"let fName = pm.variables.replaceIn('{{$randomFirstName}}')\r",
									"pm.environment.set(\"firstName\", fName);\r",
									"\r",
									"let lName = pm.variables.replaceIn('{{$randomLastName}}')\r",
									"pm.environment.set(\"lastName\", lName);\r",
									"\r",
									"let co = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.environment.set(\"company\", co);\r",
									"\r",
									"let addrLn1 = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
									"pm.environment.set(\"addressLine1\", addrLn1);\r",
									"\r",
									"let cty = pm.variables.replaceIn('{{$randomCity}}')\r",
									"pm.environment.set(\"city\", cty);\r",
									"\r",
									"let cntry = pm.variables.replaceIn('{{$randomCountry}}')\r",
									"pm.environment.set(\"country\", cntry);\r",
									"\r",
									"let phoneNum = pm.variables.replaceIn('{{$randomPhoneNumber}}')\r",
									"pm.environment.set(\"phoneNumber\", phoneNum);\r",
									"\r",
									"let boo = pm.variables.replaceIn('{{$randomBoolean}}')\r",
									"pm.environment.set(\"setAsDefault\", boo);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(responseCode.code === 200) {",
									"    tests[\"Backend is available, response code is 200\"] = false;",
									"} else if (responseCode.code === 401) {",
									"    tests[\"Not authorised, Check access token or Log in\"] = true;",
									"} else if (responseCode.code === 403) {",
									"    tests[\"Forbiden\"] = true;",
									"} else if (responseCode.code === 404) {",
									"    tests[\"Not Found. Check if you made correct request\"] = true;",
									"} else if (responseCode.code === 422) {",
									"    tests[\"The instance is not valid\"] = true;",
									"} else if (responseCode.code === 400) {",
									"    tests[\"Bad Request\"] = true;",
									"} else {",
									"    tests[\"Something went wrong. Check response body\"] = true;",
									"}",
									"",
									"pm.test(\"Status code is 400, as expected\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response Size is less than 1000 B\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Header is correct\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");",
									"    pm.response.to.have.header(\"Content-Length\",\"191\");",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.21.6\");",
									"});",
									"",
									"pm.test(\"Order can't be deleted, nonexist. As expected.\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.response.to.be.an('object');",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"});",
									"",
									"pm.test(\"Message is include previously deleted ID\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"message\", (pm.environment.get(\"ID\")));",
									"});",
									"",
									"pm.test(\"Message details ID is correct\", function () {",
									"    const jsonData = pm.response.json(); ",
									"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: \" + pm.environment.get(\"ID\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"type": "text",
								"value": "bY6X28nKyn_Oy0tq1kQZKRi-wX1CWiG9Ds4g5TKlMKU.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEyLTE4VDA0OjQ1OjIyLjU3NFoiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImFkZmQ4OWNhLTRlNjgtNDdjNi1hNzkwLWM5NDBkNmU5M2M5NyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMi0xOFQwODo0NToyMi41NzRaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "company",
								"type": "text",
								"value": "{{$randomCompanyName}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"address\": {\r\n\t\t\"id\": \"{{ID}}\",\r\n\t\t\"fullName\": {\r\n\t\t\t\"firstName\": \"{{firstName}}\",\r\n\t\t\t\"lastName\": \"{{lastName}}\"\r\n\t\t},\r\n\t\t\"company\": \"{{company}}\",\r\n\t\t\"taxInfo\": {\r\n\t\t\t\"id\": null,\r\n\t\t\t\"type\": null\r\n\t\t},\r\n\t\t\"addressLine1\": \"{{addressLine1}}\",\r\n\t\t\"addressLine2\": \"{{addressLine2}}\",\r\n\t\t\"street\": {\r\n\t\t\t\"name\": null,\r\n\t\t\t\"number\": null\r\n\t\t},\r\n\t\t\"city\": \"{{city}}\",\r\n\t\t\"country\": \"{{country}}\",\r\n\t\t\"subdivision\": \"{{subdivision}}\",\r\n\t\t\"zipCode\": \"{{zipCode}}\",\r\n\t\t\"phoneNumber\": \"{{phoneNumber}}\"\r\n\t},\r\n\t\"setAsDefault\": {{setAsDefault}},\r\n\t\"fieldMask\": {\r\n\t\t\"paths\": [\"fullName.firstName\", \"fullName.lastName\", \"company\", \"addressLine1\", \"addressLine2\", \"city\", \"country\", \"subdivision\", \"zipCode\", \"phoneNumber\", \"setAsDefault\"]\r\n\t}\r\n}"
						},
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Update Deleted address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(responseCode.code === 200) {",
									"    tests[\"Backend is available, response code is 200\"] = false;",
									"} else if (responseCode.code === 401) {",
									"    tests[\"Not authorised, Check access token or Log in\"] = true;",
									"} else if (responseCode.code === 403) {",
									"    tests[\"Forbiden\"] = true;",
									"} else if (responseCode.code === 404) {",
									"    tests[\"Not Found. Check if you made correct request\"] = true;",
									"} else if (responseCode.code === 422) {",
									"    tests[\"The instance is not valid\"] = true;",
									"} else if (responseCode.code === 400) {",
									"    tests[\"Bad Request\"] = true;",
									"} else {",
									"    tests[\"Something went wrong. Check response body\"] = true;",
									"}",
									"",
									"pm.test(\"Status code is 400, as expected\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response Size is less than 1000 B\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Header is correct\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json;charset=utf-8\");",
									"    pm.response.to.have.header(\"Content-Length\",\"191\");",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.21.6\");",
									"});",
									"",
									"pm.test(\"Order can't be deleted, nonexist. As expected.\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    pm.response.to.be.an('object');",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"});",
									"",
									"pm.test(\"Message is include previously deleted ID\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"message\", (pm.environment.get(\"ID\")));",
									"});",
									"",
									"pm.test(\"Message details ID is correct\", function () {",
									"    const jsonData = pm.response.json(); ",
									"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: \" + pm.environment.get(\"ID\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "cnndWGmkzVeGKwGws721d8SrQ0BdfoKtQmw6nHWJQgU.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTEzVDA2OjEwOjIwLjE2MloiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImFkZmQ4OWNhLTRlNjgtNDdjNi1hNzkwLWM5NDBkNmU5M2M5NyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0xM1QxMDoxMDoyMC4xNjJaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/?id={{ID}}",
							"protocol": "https",
							"host": [
								"addresses",
								"wixapps",
								"net"
							],
							"path": [
								"_api",
								"addresses-web",
								"v1",
								"addresses",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{ID}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "66rOhQgDWhi-sm_hKyzkgATgQ4Aj0djRwC3N1Xzr9GQ.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDI0LTAxLTA0VDE4OjU2OjI3LjgzMloiLCJ1aWQiOiJiMjIxNGQ3NS1hOWI2LTRiM2YtOTVmNC02NDUxZGIxMzIzZmIiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjdmYjA3OTVmLTYyOTItNDY0ZC04Yjc4LTVmY2FmZGM1ZGM0NCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyNC0wMS0wNFQyMjo1NjoyNy44MzJaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}